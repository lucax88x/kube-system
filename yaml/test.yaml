---
apiVersion: v1
kind: Service
metadata:
  name: helloworld-service
  namespace: helloworld
spec:
  type: ClusterIP
  selector:
    app: helloworld-deployment
    namespace: helloworld
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: helloworld-deployment
  namespace: helloworld
  labels:
    app: helloworld-deployment
    namespace: helloworld
spec:
  selector:
    matchLabels:
      app: helloworld-deployment
      namespace: helloworld
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: helloworld-deployment
        namespace: helloworld
    spec:
      containers:
        - name: helloworld-deployment
          image: tutum/hello-world
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 100m
              memory: 100Mi
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /_status/healthz
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          ports:
            - containerPort: 80
              name: def
      restartPolicy: Always
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: helloworld-ingress
  namespace: helloworld
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      match: "Host(`local.k8s`) && PathPrefix(`/`)"
      services:
        - kind: Service
          name: helloworld-service
          namespace: helloworld
          port: 80
# ---
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer
# metadata:
#   name: letsencrypt-stage
#   namespace: cert-manager
# spec:
#   acme:
#     server: https://acme-staging-v02.api.letsencrypt.org/directory
#     email: lucax88x@gmail.com
#     privateKeySecretRef:
#       name: letsencrypt-stage
#     solvers:
#       - http01:
#           ingress:
#             class: traefik
# ---
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer
# metadata:
#   name: letsencrypt-prod
#   namespace: cert-manager
# spec:
#   acme:
#     server: https://acme-v02.api.letsencrypt.org/directory
#     email: lucax88x@gmail.com
#     privateKeySecretRef:
#       name: letsencrypt-prod
#     solvers:
#       - http01:
#           ingress:
#             class: traefik
# ---
# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: local.k8s
#   namespace: helloworld
# spec:
#   secretName: helloworld.tls
#   issuerRef:
#     name: letsencrypt-stage
#     kind: ClusterIssuer
#   commonName: local.k8s
#   dnsNames:
#     - local.k8s
# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: nfs
#   namespace: helloworld
# spec:
#   accessModes:
#     - ReadWriteMany
#   storageClassName: "rook-nfs-share1"
#   resources:
#     requests:
#       storage: 1Mi
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nfs-busybox
#   namespace: helloworld
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       name: nfs-busybox
#       namespace: helloworld
#   template:
#     metadata:
#       labels:
#         name: nfs-busybox
#         namespace: helloworld
#     spec:
#       containers:
#         - image: busybox
#           command:
#             - sh
#             - -c
#             - "while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done"
#           imagePullPolicy: IfNotPresent
#           name: busybox
#           volumeMounts:
#             - name: my-pvc-nfs
#               mountPath: "/mnt"
#       volumes:
#         - name: my-pvc-nfs
#           persistentVolumeClaim:
#             claimName: nfs
              
# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: ceph
#   namespace: helloworld
# spec:
#   accessModes:
#     - ReadWriteMany
#   storageClassName: "rook-ceph-block"
#   resources:
#     requests:
#       storage: 1Mi
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: ceph-busybox
#   namespace: helloworld
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       name: ceph-busybox
#       namespace: helloworld
#   template:
#     metadata:
#       labels:
#         name: ceph-busybox
#         namespace: helloworld
#     spec:
#       containers:
#         - image: busybox
#           command:
#             - sh
#             - -c
#             - "while true; do date > /mnt/index.html; hostname >> /mnt/index.html; sleep $(($RANDOM % 5 + 5)); done"
#           imagePullPolicy: IfNotPresent
#           name: busybox
#           volumeMounts:
#             - name: my-pvc-ceph
#               mountPath: "/mnt"
#       volumes:
#         - name: my-pvc-ceph
#           persistentVolumeClaim:
#             claimName: ceph
